/**
 * 下請登録のコントローラクラス
 */
public without sharing class SubcontractRegistController {
    
    /** 物件ID */
    public String constructionId {get; set;}
    /** 物件 */
    public Construction__c construction {get; set;}

    /** 1次業者 */
    public Trader__c firstTrader {get; set;}
    /** 1次業リスト */
    public List<Trader__c> firstTraderList {get; set;}
    
    /** 表示用1次業者リスト */
    public List<traderClass> dispFirstTrader {get; set;}
    
    /** 表示用2次業者リスト */
    public List<traderClass> dispSecondTrader {get; set;}
    
    /** 表示用3次業者リスト */
    public List<traderClass> dispThirdTrader {get; set;}
    
    /** 表示用4次業者リスト */
    public List<traderClass> dispFourthTrader {get; set;}
    
    /** 画面表示用リスト */
    public List<dispConstructionClass> dispConstruction {get; set;}
    
    /** 遷移元のURL */
    public String retUrl {get;set;}

    /** デフォルトコンストラクタ */
    public SubcontractRegistController() {

        this.firstTraderList = new List<Trader__c>();
    }

    /**
     * 初期表示処理
     */
    public PageReference init() {

        //ログインユーザの所属する取引先の取得
        String accId = CommonUtils.getUserAccount();
        
        // 遷移元のURLを保持する
        this.retUrl = Apexpages.currentPage().getParameters().get('retUrl');

        // 物件IDを取得
        this.constructionId = ApexPages.currentPage().getParameters().get('id');
        
        this.construction = this.getConstruction(constructionId);

        // 1次業者取得
        this.firstTrader = this.getTrader(accId, constructionId);
        this.firstTraderList.add(firstTrader);

        this.createTraderList();

        // 表示用1~4次業者リスト初期化
        this.dispConstruction = new List<dispConstructionClass>();

        this.addNewLine();

        return null;
    }

    /**
     * 戻るボタン押下処理
     */
    public PageReference returnTo() {
        if(String.isNotBlank(this.retUrl)){
            PageReference pageRef = Page.ConstructionReference;
            pageRef.getParameters().put('constId',this.constructionId);
            pageRef.getParameters().put('retUrl',this.retUrl);
            pageRef.setRedirect(true);
            return pageRef;
        } else {
            PageReference pageRef = Page.ConstructionList;
            return pageRef;
        }
    }

    /**
     * 下請を使わないボタン押下処理
     */
    public PageReference changeNotUseSubcontract() {

        Savepoint sp = Database.setSavepoint();
        try{

            // 下請業者を使用しないフラグをtureにする
            this.firstTrader.IsNotUseSubcontract__c = true;
            //this.firstTrader = null;
            
            system.debug('this.firstTrader'+this.firstTrader);
            update this.firstTrader;

            // 全ての下請業者を削除する
            this.deleteAllTrader();

        } catch(Exception e) {
            Database.rollback(sp);
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, CommonStrings.ERR_MSG_SAVE_FAILURE + e.getMessage()));
            return null;
        }

        PageReference pageRef = System.Page.SubcontractRegist;
        pageRef.getParameters().put('Id',this.constructionId);
        pageRef.getParameters().put('retUrl',this.retUrl);
        pageRef.setRedirect(true);

        return pageRef;
    }

    /**
     * 下請を使うボタン押下処理
     */
    public PageReference changeUseSubcontract() {

        Savepoint sp = Database.setSavepoint();
        try{

            // 下請業者を使用しないフラグをtureにする
            this.firstTrader.IsNotUseSubcontract__c = false;
            update this.firstTrader;

        } catch(Exception e) {
            Database.rollback(sp);
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, CommonStrings.ERR_MSG_SAVE_FAILURE + e.getMessage()));

        }

        PageReference pageRef = System.Page.SubcontractRegist;
        pageRef.getParameters().put('Id',this.constructionId);
        pageRef.getParameters().put('retUrl',this.retUrl);
        pageRef.setRedirect(true);

        return pageRef;
    }

    /**
     * 削除ボタン押下処理
     */
    public PageReference deleteTrader() {
        
        Savepoint sp = Database.setSavepoint();
        try{

            // 削除対象の業者IDを取得
            String targetId = ApexPages.currentPage().getParameters().get('target');
            // 業者の下請業者のIDを取得
            String supplierId = ApexPages.currentPage().getParameters().get('supplier');
            system.debug('constructionId'+this.constructionId);
            if (String.isNotBlank(targetId)) {
                // 削除対象のリストを作成
                List<Trader__c> deleteList = new List<Trader__c>();
                Set<Id> deleteIdSet = new Set<Id>();
                deleteIdSet.add(targetId);
                system.debug('supplierId:'+supplierId);
                //// 下請取得1
                //List<Trader__c> subcont0List = this.getSubcontract(supplierId, this.constructionId, 2);
                //system.debug('２次業者'+subcont0List);
                //List<Id> subcont0IdList = new List<Id>();
                //if(subcont0List.isEmpty()){
                //    subcont0IdList.add(supplierId);
                //} else {
                //    for (Trader__c trader : subcont0List) {
                //        subcont0IdList.add(trader.Supplier__c);
                //        deleteIdSet.add(trader.Id);
                //    }
                //}
                // 下請取得1
                List<Trader__c> subcont1List = this.getSubcontract(supplierId, this.constructionId, 3);
                system.debug('３次業者'+subcont1List);
                List<Id> subcont1IdList = new List<Id>();
                if(subcont1List.isEmpty()){
                    subcont1IdList.add(supplierId);
                } else {
                    for (Trader__c trader : subcont1List) {
                        subcont1IdList.add(trader.Supplier__c);
                        deleteIdSet.add(trader.Id);
                    }
                }
                system.debug('subcont1IdList:'+subcont1IdList);
                // 下請取得2
                List<Trader__c> subcont2List = this.getSubcontract(subcont1IdList, this.constructionId, 4);
                system.debug('４次業者'+subcont2List);
                for (Trader__c trader : subcont2List) {
                    deleteIdSet.add(trader.Id);
                }

                deleteList = [SELECT Id FROM Trader__c WHERE Id IN :deleteIdSet];

                // 削除する
                delete deleteList;
            }
        } catch(Exception e) {
            Database.rollback(sp);
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, CommonStrings.ERR_MSG_SAVE_FAILURE + e.getMessage()));

        }
        
        PageReference pageRef = System.Page.SubcontractRegist;
        pageRef.getParameters().put('Id',this.constructionId);
        pageRef.getParameters().put('retUrl',this.retUrl);
        pageRef.setRedirect(true);

        return pageRef;
    }

    /**
     * 物件取得処理
     * @param ID
     * @return 取引先情報
     */
    private Construction__c getConstruction(String thisId){

        Construction__c construct = new Construction__c();

        // 業者情報
        String query = 'SELECT ';
        query += ' Id, name, SupervisionEngineerName__c, WholesalerName__c, ';
        query += ' StartDate__c, EndDate__c';
        query += ' FROM Construction__c ';
        query += ' WHERE Id = :thisId';
        construct = Database.query(query);
        
        return construct;
    }

    /**
     * 業者取得処理
     * @param 取引先ID
     * @param 物件ID
     * @return 業者情報
     */
    private Trader__c getTrader(String accId, String constructionId){

        Trader__c trader = new Trader__c();
        List<String> idList = new List<String>();
        idList.add(accId);
        
        trader = this.getTrader(idList, constructionId)[0];

        return trader;
    }

    /**
     * 業者取得処理
     * @param 取引先ID
     * @param 物件ID
     * @return 業者情報
     */
    private List<Trader__c> getTrader(List<String> idList, String constructionId){

        List<Trader__c> traderList = new List<Trader__c>();

        // 業者情報
        String query = 'SELECT ';
        query += ' Id, name, Supplier__c, Subcontract__c, Supplier__r.Name, LeadEngineer__r.Name, ';
        query += ' IsFulltime__c, StartDate__c, EndDate__c, ConstructionContent__c, IsNotUseSubcontract__c, FirstSubcontract__c, SecondSubcontract__c, ThirdSubcontract__c';
        query += ' FROM Trader__c ';
        query += ' WHERE Supplier__c IN :idList';
        query += ' AND TraderConstruction__c = :constructionId';
        query += ' ORDER BY CreatedDate DESC';
        traderList = Database.query(query);

        return traderList;
    }

    /**
     * 下請業者のリストを作成する処理
     */
    private void createTraderList() {
        // 2次業者用親ID取得用のリストを作成
        List<Id> parentIdList = new List<Id>();
        
        for (Trader__c firstTrader : firstTraderList) {
            // 親業者IDを取得
            if (String.isNotBlank(firstTrader.Supplier__c)) { parentIdList.add(firstTrader.Supplier__c);}
        }
        
        // 2次業者取得
        List<Trader__c> secondTraderList = this.getSubcontract(parentIdList, constructionId,2);
        // 3次業者用のリストを作成
        List<Trader__c> thirdTraderList = new List<Trader__c>();
        // 4次業者用のリストを作成
        List<Trader__c> fourthTraderList = new List<Trader__c>();
        
        // 1次業者を親に持つ2次業者のマップ
        Map<Id, Id> secondMap = new Map<Id, Id>();
        // 2次業者を親に持つ3次業者のマップ
        Map<Id, Id> thirdMap = new Map<Id, Id>();
        // 3次業者を親に持つ4次業者のマップ
        Map<Id, Id> fourthMap = new Map<Id, Id>();
        
        // 3次業者用親ID取得
        List<Id> secondIdList = new List<Id>();
        for (Trader__c item : secondTraderList) {
            secondIdList.add(item.Supplier__c);
            secondMap.put(item.Id, item.FirstSubcontract__c);
        }
        
        if (!secondIdList.isEmpty()) {
            // 3次業者取得
            thirdTraderList = this.getSubcontract(secondIdList, constructionId,3);
            
            // 4次業者用親ID取得
            List<Id> thirdIdList = new List<Id>();
            for (Trader__c item : thirdTraderList) {
                thirdIdList.add(item.Supplier__c);
                thirdMap.put(item.Id, item.SecondSubcontract__c);
            }
            
            if (!thirdIdList.isEmpty()) {
                // 4次業者取得
                fourthTraderList = this.getSubcontract(thirdIdList, constructionId,4);
            }
        }
        
        for (Trader__c item : fourthTraderList) {
            fourthMap.put(item.Id, item.ThirdSubcontract__c);
        }
        
        // 各種表示用リスト初期化
        this.dispFirstTrader = new List<traderClass>();
        this.dispSecondTrader = new List<traderClass>();
        this.dispThirdTrader = new List<traderClass>();
        this.dispFourthTrader = new List<traderClass>();
        
        /*
         * 1次から順に表示用リストに加えていく
         * ・自身より下の業者が存在しない場合は空行を追加する（例：1次より下がいない場合は2~4次の空行追加、2次より下がいない場合は3,4次の空行追加）
         * ・同じ親に紐づく場合は、その行の親業者を非表示とする（ただし改ページを行った場合は表示されるようにする)
         * ・親が違う場合は何もしない
         * ・最終的に1~4次の各リストの長さは同じになる
         */
        
        // 1次業者をリストに加える
        for (Trader__c item : firstTraderList) {
            
            // 1次業者に加える
            traderClass firstTrader = new traderClass(item, 1, item.FirstSubcontract__c, false);
            this.dispFirstTrader.add(firstTrader);
            
            // 1次業者の数をカウントする
            Integer countFirst = 1;
            
            // 下請業者が有るかどうかを判断する
            Boolean isParentFirst = false;
            for (String str : secondMap.values()) {
                
                if (str == item.Supplier__c) {
                    isParentFirst = true;
                }
            }
            
            // 下請業者が存在しない場合
            if (!isParentFirst) {
                system.debug('下請がいないので2次と3次と4次の空白の行を追加する');
                traderClass secondTraderDummy = new traderClass(2);
                this.dispSecondTrader.add(secondTraderDummy);
                
                traderClass thirdTraderDummy = new traderClass(3);
                this.dispThirdTrader.add(thirdTraderDummy);
                
                traderClass fourthTraderDummy = new traderClass(4);
                this.dispFourthTrader.add(fourthTraderDummy);
            }
            system.debug('secondTraderList: ' + secondTraderList.size());
            // 2次業者をリストに加える
            for (Trader__c second : secondTraderList) {
                
                // 親が異なる場合はリストに追加せずにスルー
                if (item.Supplier__c != second.FirstSubcontract__c) {
                    continue;
                }
                
                // 既に1次業者が存在する場合は空の列を追加する
                if (countFirst > 1) {
                    traderClass firstTraderDummy = new traderClass(item, 1, item.Supplier__c, true);
                    this.dispFirstTrader.add(firstTraderDummy);
                }
                
                // 2次業者に加える
                traderClass secondTrader = new traderClass(second, 2, second.FirstSubcontract__c, false);
                this.dispSecondTrader.add(secondTrader);
                
                // 2次業者の数をカウントする
                Integer countSecond = 1;
                
                // 下請業者が有るかどうかを判断する
                Boolean isParentSecond = false;
                for (String str : thirdMap.values()) {
                    
                    if (str == second.Supplier__c) {
                        isParentSecond = true;
                    }
                }
                
                // 下請業者が存在しない場合
                if (!isParentSecond) {
                    system.debug('下請がいないので3次と4次の空白の行を追加する');
                    traderClass thirdTraderDummy = new traderClass(3);
                    this.dispThirdTrader.add(thirdTraderDummy);
                    
                    traderClass fourthTraderDummy = new traderClass(4);
                    this.dispFourthTrader.add(fourthTraderDummy);
                }
                system.debug('thirdTraderList: ' + thirdTraderList.size());
                // 3次業者をリストに加える
                for (Trader__c third : thirdTraderList) {
                    
                    // 3次業者の数をカウントする
                    integer countThird = 1;
                    
                    // 親が異なる場合はリストに追加せずにスルー
                    if (second.Supplier__c != third.SecondSubcontract__c) {
                        continue;
                    }
                    
                    // 既に2次業者が存在する場合は1次と2次の空の列を追加する
                    if (countSecond > 1) {
                        traderClass firstTraderDummy = new traderClass(item, 1, item.Supplier__c, true);
                        this.dispFirstTrader.add(firstTraderDummy);
                        
                        traderClass secondTraderDummy = new traderClass(second, 2, second.FirstSubcontract__c, true);
                        this.dispSecondTrader.add(secondTraderDummy);
                    }
                    
                    traderClass thirdTrader = new traderClass(third, 3, third.SecondSubcontract__c, false);
                    this.dispThirdTrader.add(thirdTrader);
                    
                    // 下請業者がいるかどうかを判断する
                    Boolean isParentThird = false;
                    for (String str : fourthMap.values()) {
                        
                        if (str == third.Supplier__c) {
                            isParentThird = true;
                        }
                    }
                    
                    // 下請業者が存在しない場合
                    if (!isParentThird) {
                        system.debug('下請がいないので4次の空白の行を追加する: ' + third.Name);
                        
                        traderClass fourthTraderDummy = new traderClass(4);
                        this.dispFourthTrader.add(fourthTraderDummy);
                    }
                    system.debug('fourthTraderList: ' + fourthTraderList.size());
                    // 4次業者をリストに加える
                    for (Trader__c fourth : fourthTraderList) {
                        
                        // 親が異なる場合はリストに追加せずにスルー
                        if (third.Supplier__c != fourth.ThirdSubcontract__c) {
                            continue;
                        }
                        
                        traderClass fourthTrader = new traderClass(fourth, 4, fourth.FirstSubcontract__c, false);
                        this.dispFourthTrader.add(fourthTrader);
                        
                        // 既に3次業者が存在する場合は1次と2次と3次の空の列を追加する
                        if (countThird > 1) {
                            traderClass firstTraderDummy = new traderClass(item, 1, item.Supplier__c, true);
                            this.dispFirstTrader.add(firstTraderDummy);
                            
                            traderClass secondTraderDummy = new traderClass(second, 2, second.SecondSubcontract__c, true);
                            this.dispSecondTrader.add(secondTraderDummy);
                            
                            traderClass thirdTraderDummy = new traderClass(third, 3, third.ThirdSubcontract__c, true);
                            this.dispThirdTrader.add(thirdTraderDummy);
                        }
                        
                        countThird ++;
                    }
                    
                    countSecond ++;
                }
                
                countFirst ++;
            }
        }
    }

    /**
     * リスト追加処理
     */
    private void addNewLine() {
        
        // リストのサイズを求める
        Integer size = this.dispFirstTrader.size();
        // 5件未満の場合は最低5件表示する
        //if (size < 5) size = 5;

        dispConstructionClass dcc = new dispConstructionClass();

        /**
         * 表示用リストに追加していく
         * ・5件未満の場合は5件になるようにリストを穴埋めする
         */
        for (Integer i = 0; i < size; i++) {

            /*if (this.dispFirstTrader.size() <= i && this.dispFirstTrader.size() < 5) {
                dcc.dispFirstTrader.add(new traderClass(1));
                dcc.dispSecondTrader.add(new traderClass(2));
                dcc.dispThirdTrader.add(new traderClass(3));
                dcc.dispFourthTrader.add(new traderClass(4));
            } else {*/
                dcc.dispFirstTrader.add(this.dispFirstTrader[i]);
                dcc.dispSecondTrader.add(this.dispSecondTrader[i]);
                dcc.dispThirdTrader.add(this.dispThirdTrader[i]);
                dcc.dispFourthTrader.add(this.dispFourthTrader[i]);
            //}
            
        }
        
        this.dispConstruction.add(dcc);
        system.debug('dispConstruction: ' + dispConstruction);
    }

    /**
     * 下請業者取得処理
     * @param 親業者ID
     * @param 物件ID
     * @param 階層
     * @return 業者情報
     */
    private List<Trader__c> getSubcontract(String parentId, String constructionId, Integer hierarchy){

        List<Trader__c> traderList = new List<Trader__c>();

        // 業者情報
        List<String> idList = new List<String>();
        idList.add(parentId);
        
        traderList = this.getSubcontract(idList, constructionId, hierarchy);

        return traderList;
    }
    
    /**
     * 下請業者取得処理
     * @param 親業者ID
     * @param 物件ID
     * @return 業者情報
     */
    private List<Trader__c> getSubcontract(List<String> parentIds, String constructionId, Integer hierarchy){

        List<Trader__c> traderList = new List<Trader__c>();

        // 業者情報
        String query = 'SELECT ';
        query += ' Id, Name, Subcontract__c, Supplier__r.Name, LeadEngineer__r.Name, ';
        query += ' IsFulltime__c, StartDate__c, EndDate__c, ConstructionContent__c, FirstSubcontract__c, SecondSubcontract__c, ThirdSubcontract__c';
        query += ' FROM Trader__c ';
        //query += ' WHERE Subcontract__c IN :parentIds';
        query += ' WHERE Id != null';
        // 2次請の場合
        if (hierarchy == 2) {
            query += ' AND FirstSubcontract__c IN :parentIds';
            query += ' AND SecondSubcontract__c = null';
            query += ' AND ThirdSubcontract__c = null';
        // 3次請の場合
        } else if (hierarchy == 3) {
            query += ' AND SecondSubcontract__c IN :parentIds';
            query += ' AND ThirdSubcontract__c = null';
        // 4次請の場合
        } else if (hierarchy == 4) {
            query += ' AND ThirdSubcontract__c IN :parentIds';
        }
        
        query += ' AND TraderConstruction__c = :constructionId';
        query += ' ORDER BY CreatedDate';
        system.debug('下請業者取得SQL:'+query);
        traderList = Database.query(query);

        return traderList;
    }

    /**
     * 全下請業者削除処理
     */
    private void deleteAllTrader() {
        Set<Id> deleteIdSet = new Set<Id>();

        for (traderClass tc : this.dispSecondTrader) {
            deleteIdSet.add(tc.trader.Id);
        }
        for (traderClass tc : this.dispThirdTrader) {
            deleteIdSet.add(tc.trader.Id);
        }
        for (traderClass tc : this.dispFourthTrader) {
            deleteIdSet.add(tc.trader.Id);
        }
        system.debug('deleteIdSet'+deleteIdSet);
        // 下請業者レコードを全て削除する
        List<Trader__c> deleteList = [SELECT Id FROM Trader__c WHERE Id IN :deleteIdSet];
        delete deleteList;
    }

    /**
     * 1~4次業者表示用インナークラス
     */
    public class traderClass {
        /** 業者 */
        public Trader__c trader {get; set;}
        /** 階層 */
        public Integer hierarchy {get; set;}
        /** 親業者 */
        public String parentId {get; set;}
        /** 添付ファイルID */
        public String pictId {get; set;}
        /** 空行かどうか */
        public Boolean isBlank {get; set;}
        /** 新規かどうか */
        public Boolean isNew {get; set;}
        
        /** コンストラクタ(新規) */
        public traderClass(Integer hierarchy) {
            this.trader = new Trader__c();
            this.hierarchy = hierarchy;
            this.isBlank = true;
            this.isNew = true;
            this.pictId = '';
        }
        
        /** コンストラクタ(通常) */
        public traderClass(Trader__c trader, Integer hierarchy, String parentId, Boolean isBlank) {
            
            this.trader = trader;
            this.hierarchy = hierarchy;
            this.parentId = parentId;
            this.isBlank = isBlank;
            this.pictId = pictId;
            this.isBlank = isBlank;
            this.isNew = false;
            
            // 最初に呼び出された時は工事内容の改行を行う
            //if (!isBlank) this.trader.ConstructionContent__c = lineBreak(this.trader.ConstructionContent__c, 1);
        }
        
        /** コンストラクタ(再設定用) */
        public traderClass(traderClass tc) {
            
            this.trader = tc.trader;
            this.hierarchy = tc.hierarchy;
            this.parentId = tc.parentId;
            this.isBlank = false;
            this.pictId = tc.pictId;
            this.isNew = tc.isNew;
        }
        
        /**
         * 指定した文字数で改行コードを入れる
         * @param value 改行を入れたい文字列 
         * @param posLength 何文字目で改行コード（折り返し）を入れるかの文字数 
         * @return 指定した文字数で改行コード（折り返し）がある文字列 
         */
        private String lineBreak(String value, Integer posLength) {
            // 空白や折り返し行未満なら何もしない
            if (value == null || value.length() <= posLength) return value;
            
            system.debug('value: ' + value);
            String rtnValue = value.substring(0, posLength) + '\n';
            
            for (Integer i = posLength; i < value.length(); i++) {
                if (Math.mod(i, posLength) == 0) {
                    if (value.length() > i + posLength) {
                        rtnValue += value.substring(i, i + posLength ) + '\n';
                    } else {
                        rtnValue += value.substring(i,value.length());
                    }
                }
            }
            return rtnValue; 
        }
    }

    /**
     * 画面表示用クラス
     */
    public class dispConstructionClass {
        public List<traderClass> dispFirstTrader {get; set;}
        public List<traderClass> dispSecondTrader {get; set;}
        public List<traderClass> dispThirdTrader {get; set;}
        public List<traderClass> dispFourthTrader {get; set;}
        
        /** コンストラクタ */
        public dispConstructionClass() {
            this.dispFirstTrader = new List<traderClass>();
            this.dispSecondTrader = new List<traderClass>();
            this.dispThirdTrader = new List<traderClass>();
            this.dispFourthTrader = new List<traderClass>();
        }
    }
}
